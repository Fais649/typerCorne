/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

#define AS(keycode) &am LS(keycode) keycode    
#define RAS(keycode) &am keycode LS(keycode)    
#define AG(keycode) &am LG(keycode) keycode     // Autoshift Macro
#define RAG(keycode) &am keycode LG(keycode)     
#define ST(keycode, layer) &st keycode layer      

#define STLM(mod, layer) &stlm mod &lm mod layer

/ {
    macros {
							/*  l1ls: l1ls { */
							/*      compatible = "zmk,behavior-macro"; */
							/*      #binding-cells = <0>; */
							/*      bindings = */
							/*  <&macro_press &mo 1 &kp LSHFT> */
							/* , <&macro_pause_for_release> */
							/* , <&macro_release &mo 1 &kp LSHFT>; */
							/**/
							/*      label = "Layer1+LSHIFT"; */
							/*  }; */

						lm: lm {
    compatible = "zmk,behavior-macro-two-param";
    wait-ms = <0>;
    tap-ms = <0>;
    #binding-cells = <2>;
    bindings
        = <&macro_param_1to1>
        , <&macro_tap &sl MACRO_PLACEHOLDER>
        , <&macro_param_2to1>
        , <&macro_tap &sk MACRO_PLACEHOLDER>
        /* , <&macro_pause_for_release> */
        /* , <&macro_param_2to1> */
        /* , <&macro_release &sk MACRO_PLACEHOLDER> */
        /* , <&macro_param_1to1> */
        /* , <&macro_release &sl MACRO_PLACEHOLDER> */
        ;
};
    };

 behaviors {
        /* l1t: l1t { */
        /*     compatible = "zmk,behavior-hold-tap"; */
        /*     #binding-cells = <0>; */
        /*     tapping-term-ms = <400>; */
        /*     bindings = <&l1ls>, <&kp ESC>; */
        /* }; */

        /* gl1t: gl1t { */
        /*     compatible = "zmk,behavior-tap-dance"; */
        /*     #binding-cells = <0>; */
        /*     tapping-term-ms = <400>; */
        /*     bindings = <&kp LGUI>, <&l1lg>; */
        /* }; */

 am: auto_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

 st: sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&sl>;
        };


 stlm: sticky_tap_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <300>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        };
    

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB              &kp Q  &kp W  &kp E     &kp R   &kp T              &kp Y      &kp U     &kp I        &kp O         &kp P            &kp DELETE
&mt LCTRL ESC        &kp A  &kp S  &kp D     &kp F   &kp G              &kp H      &kp J     &kp K        &kp L         AS(SEMI)        AS(SQT)
&kp LSHFT            &kp Z  &kp X  &kp C     &kp V   &kp B              &kp N      &kp M     AS(COMMA) AS(DOT) AS(FSLH)  &kp RIGHT_SHIFT
                                   STLM(LGUI,  1)     &kp ESC     &lt 1 BACKSPACE          &kp SPACE  &lt 1 TAB   &mt LALT ENTER
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Lower";
            bindings = <
&trans  AG(N1)   AG(N2)     AG(N3)      &kp F1             &kp F2               &kp F3            &kp F4    &kp N8     &kp N9     &kp N0  &kp F12
&trans  AG(N4)  &kp N5     &kp N6      RAS(LBKT)          RAS(RBKT)           &kp LEFT          &kp DOWN  &kp UP     &kp RIGHT  &trans  &trans
&trans  &kp N7  &kp N8     &kp N9      &kp LS(N9)  	      &kp LS(N0)           &kp MINUS          &kp EQUAL    &trans     &trans     &trans  &trans
                           &kp N0      &trans             &trans               &trans            &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Raise";
            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp LBKT                &kp RIGHT_BRACKET  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp RPAR  &kp ENTER
&kp LCTRL  &trans    &trans  &trans    &trans    &kp LBRC                &kp RBRC           &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &kp LEFT_PARENTHESIS    &kp RPAR           &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &trans                  &trans             &trans        &kp NUMBER_0
            >;
        };

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
